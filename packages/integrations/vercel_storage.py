"""Vercel storage integration helpers.

This module provides minimal wrappers for interacting with the Vercel Blob
Store and Edge Config services using plain HTTP requests. The behaviour is
safe to import even when the related environment variables are not set; in
that case the helpers simply no-op and return empty results.
"""

from __future__ import annotations

import os
from typing import Dict, Any

import httpx

# Base URL for the Vercel Blob store.  The default points at the public API.
BLOB_STORE_URL = os.getenv("VERCEL_BLOB_URL", "https://blob.vercel-storage.com")
# Token with read/write permissions generated by Vercel.
BLOB_RW_TOKEN = os.getenv("VERCEL_BLOB_RW_TOKEN") or os.getenv("BLOB_READ_WRITE_TOKEN")

# Full URL to an Edge Config resource, typically of the form
# https://edge-config.vercel.com/<id>?token=<token>
EDGE_CONFIG_URL = os.getenv("VERCEL_EDGE_CONFIG_URL") or os.getenv("EDGE_CONFIG_URL")


def upload_blob(filename: str, content: bytes, content_type: str | None = None) -> str:
    """Upload ``content`` to the Vercel Blob store.

    Returns the public URL of the stored blob, or an empty string if uploading
    fails or credentials are missing.
    """

    if not BLOB_RW_TOKEN:
        return ""
    headers = {"Authorization": f"Bearer {BLOB_RW_TOKEN}"}
    if content_type:
        headers["Content-Type"] = content_type
    url = f"{BLOB_STORE_URL.rstrip('/')}/{filename}"
    try:
        resp = httpx.put(url, headers=headers, content=content, timeout=10)
        resp.raise_for_status()
    except Exception:
        return ""
    return url


def get_edge_config() -> Dict[str, Any]:
    """Fetch configuration data from Vercel Edge Config.

    Returns a dictionary of configuration values.  If the ``EDGE_CONFIG_URL``
    is not configured or the request fails, an empty dictionary is returned.
    """

    if not EDGE_CONFIG_URL:
        return {}
    try:
        resp = httpx.get(EDGE_CONFIG_URL, timeout=10)
        resp.raise_for_status()
        return resp.json()
    except Exception:
        return {}
